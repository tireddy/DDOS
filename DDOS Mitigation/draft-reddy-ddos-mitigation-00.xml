<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-reddy-ddos-mitigation-00" ipr="trust200902">
  <front>
    <title abbrev="Co-operative DDoS Mitigation">Co-operative DDoS
    Mitigation</title>

    <author fullname="Dan Wing" initials="D." surname="Wing">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>170 West Tasman Drive</street>

          <city>San Jose</city>

          <region>California</region>

          <code>95134</code>

          <country>USA</country>
        </postal>

        <email>dwing@cisco.com</email>
      </address>
    </author>

    <author fullname="Tirumaleswar Reddy" initials="T." surname="Reddy">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>Cessna Business Park, Varthur Hobli</street>

          <street>Sarjapur Marathalli Outer Ring Road</street>

          <city>Bangalore</city>

          <region>Karnataka</region>

          <code>560103</code>

          <country>India</country>
        </postal>

        <email>tireddy@cisco.com</email>
      </address>
    </author>

    <author fullname="Prashanth Patil" initials="P." surname="Patil">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street></street>

          <street></street>

          <city>Bangalore</city>

          <country>India</country>
        </postal>

        <email>praspati@cisco.com</email>
      </address>
    </author>

    <author fullname="Mohamed Boucadair" initials="M." surname="Boucadair">
      <organization>France Telecom</organization>

      <address>
        <postal>
          <street></street>

          <city>Rennes</city>

          <region></region>

          <code>35000</code>

          <country>France</country>
        </postal>

        <email>mohamed.boucadair@orange.com</email>
      </address>
    </author>

    <date />

    <workgroup>DOTS</workgroup>

    <abstract>
      <t>This document discusses mechanisms that a downstream Autonomous
      System (AS) can use, when it detects a potential Distributed
      Denial-of-Service (DoS) attack, to request the upstream AS to perform
      inbound filtering in its ingress routers for traffic that the downstream
      AS wishes to drop. The upstream AS can then block or rate-limit suspect
      traffic to the downstream AS thus reducing the effectiveness of the
      attack.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t>A DDoS attack is an attempt to make machines or network resources
      unavailable to their intended users. In most cases, sufficient scale can
      be achieved by compromising enough end-hosts and using those infected
      hosts to perpetrate the attack. The victim in this attack can be a
      application server, a client or router, a firewall, or a network link of
      an entire network etc.</t>

      <t>Enterprises typically deploy DDoS monitoring appliances that are
      capable of inspecting and monitoring traffic to detect potential DDoS
      threats and generate alarms when some threshold have been reached. This
      document describes a means for such enterprises to inform its access
      network of the IP addresses that are causing DDoS. The access network
      can use this information to discard flows from such IP addresses
      reaching the customer network.</t>

      <t>The advantage of the proposed mechanism is that the upstream AS can
      provide protection to the downstream AS from bandwidth-saturating DDoS
      traffic.</t>
    </section>

    <section anchor="notation" title="Notational Conventions">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"></xref>.</t>
    </section>

    <section title="Solution overview">
      <t>Network applications have finite resources like CPU cycles, number of
      processes or threads it can create and use, maximum number of
      simultaneous connections it can handle etc. In processing network
      traffic, such an application uses these resources to do its intended
      task. However, an attacker may be able to prevent the application from
      performing its intended task by causing the application to exhaust the
      finite supply of a specific resource. For example TLS, HTTP floods or
      low and slow attacks and application based DDoS attacks are expected to
      be detected on the server side.</t>

      <t>The complexity and the multitude of potential targets results in
      making DDoS detection a distributed system over a network. Flood attacks
      can be detected at the entrance of the network, SYN flood may be
      detected by firewalls associated to behavioral analysis. Attack on the
      link is carried out by sending enough traffic such that the link becomes
      excessively congested, and legitimate traffic suffers high packet loss.
      Other possible DDOS attacks are discussed in <xref
      target="RFC4732"></xref>.</t>

      <t>In each of the cases described above, if a network resource detects a
      potential DDoS attack from a set of IP addresses, the network resource
      informs the CPE router of all suspect IP addresses that need to be
      blocked or black-listed for further investigation. The CPE router
      in-turn propagates the black-listed IP addresses to the access network
      and the access network blocks traffic from these IP addresses to the
      customer network thus reducing the effectiveness of the attack. The
      network resource after certain duration requests the rules to block
      traffic from these IP addresses be removed.</t>

      <t>If the black listed IPv4 address is shared by multiple subscribers
      then the side affect of applying the black-list rule will be that
      traffic from non-attackers will also be blocked by the access
      network.</t>
    </section>

    <section title="Protocol requirements">
      <t>The protocol requirements for co-operative DDoS mitigation are the
      following: <list style="symbols">
          <t>Acknowledgement for a filtering request.</t>

          <t>Mechanism to delete a configured rule.</t>

          <t>Mechanism to covey lifetime of a rule.</t>

          <t>Protocol needs to support "forward compatibility" where the
          network resource can tell the network entity what version it
          supports and vice-versa. Any protocol describing attack mitigations
          needs forwards compaibility so that new attacks can be described
          while still allowing older peers (who do not yet understand the new
          attack) to provide some mitigation.</t>
        </list>The security requirements for co-operative DDoS mitigation are
      the following: <list style="symbols">
          <t>There must be a mechanism for mutual authentication between the
          network resource that is signaling black-list rules and the network
          entity that uses the rules either to propagate the rules upstream or
          enforces the rules locally to block traffic from attackers.</t>

          <t>Integrity protection is necessary to ensure that a
          man-in-the-middle device does not alter the rules.</t>

          <t>Replay protection is required to ensure that passive attacker
          does not replay old rules.</t>
        </list></t>
    </section>

    <section title="Protocols for consideration">
      <t>An access network can advertise support for filtering rules based on
      REST APIs. A CPE router should use RESTful APIs discussed in this
      section to inform the access network of any desired IP filtering rules.
      If the access network does not advertise support for REST, BGP can be
      used. The means by which an access network can make this advertisement
      is outside the scope of this document.</t>

      <section title="REST">
        <t>A network resource could use HTTP protocol to provision and manage
        filters on the access network. The network resource authenticates
        itself to the CPE router, which in turn authenticates itself to a
        server in the access network, creating a two-link chain of transitive
        authentication between the network resource and the access network.
        The CPE router validates if the network resource is authorized to
        signal the black-list rules. Similar the server in the access network
        validates if the CPE router is authorized to signal the black-list
        rules. To create or purge filters, the network resource sends HTTP
        requests to the CPE router. The CPE router acts as HTTP proxy,
        validates the rules and proxies the HTTP requests containing the
        black-listed IP addresses to the HTTP server in the access network.
        When the HTTP proxy receives the associated HTTP response from the
        HTTP server, it propagates the response back to the network
        resource.</t>

        <t>If an attack is detected by the CPE router then it can act as a
        HTTP client and signal the black-list rules to the access network.
        Thus the CPE router plays the role of both HTTP client and HTTP
        proxy.</t>

        <t><figure>
            <artwork><![CDATA[
  Network                                           
  Resource          CPE router              Access network     __________
+-------------+    +------------+          +-------------+    /          \   
|             |____|            |__________|             |___ | Internet |
| HTTP Client |    | HTTP Proxy |          | HTTP Server |    |          |
|             |    |            |          |             |    |          |
+-------------+    +------------+          +-------------+    \__________/   

]]></artwork>
          </figure></t>

        <t>JSON <xref target="RFC7159"></xref> payloads can be used to convey
        both filtering rules as well as protocol specific payload messages
        that convey request parameters and response information such as
        errors. An HTTP POST request will be used to push black-list rules to
        the access network.</t>

        <t><figure anchor="Figure1" title="POST to install black-list rules">
            <artwork align="left"><![CDATA[  POST {scheme}://{host}:{port}/.well-known/{version}/{URI suffix}
  Accept: application/json
  Content-type: application/json
  {
     "policy-id": number,
     "traffic-protocol": string,
     "source-protocol-port": string, 
     "destination-protocol-port": string,
     "destination-ip": string,
     "source-ip": string,
     "lifetime": number,
     "traffic-rate" : number,
   }
]]></artwork>
          </figure></t>

        <t>The header fields are described below.</t>

        <t><list style="hanging">
            <t hangText="policy-id:">Identifier of the policy represented
            using a number.</t>

            <t hangText="traffic-protocol: ">Valid protocol values are tcp and
            udp.</t>

            <t hangText="source-protocol-port: ">For TCP or UDP: the source
            range of ports (e.g. 1024-65535).</t>

            <t hangText="destination-protocol-port: ">For TCP or UDP: the
            destination range of ports (e.g. 443-443).</t>

            <t hangText="destination-ip: ">The destination IP addresses or
            prefixes.</t>

            <t hangText="source-ip: ">The source IP addresses or prefixes.</t>

            <t hangText="lifetime: ">Lifetime of the policy in seconds.</t>

            <t hangText="traffic-rate: ">This field carries the rate
            information in IEEE floating point [IEEE.754.1985] format, units
            being bytes per second. A traffic-rate of 0 should result on all
            traffic for the particular flow to be discarded.</t>
          </list></t>

        <t>The relative order of two rules is determined by comparing their
        respective policy identifiers. The rule with lower numeric policy
        identifier value has higher precedence (and thus will match before)
        than the rule with higher numeric policy identifier value.</t>

        <t>The following example shows POST request to block traffic from
        attacker IPv6 prefix 2001:db8:abcd:3f01::/64 to network resource using
        IPv6 address 2002:c633:6401::1 to provide HTTPS web service.</t>

        <t><figure anchor="Figure2" title="POST to install black-list rules">
            <artwork align="left"><![CDATA[  POST https://www.example.com/.well-known/v1/acl
  Accept: application/json
  Content-type: application/json
   {
     "policy-id": 123321333242,
     "traffic-protocol": "tcp",
     "source-protocol-port": "1-65535", 
     "destination-protocol-port": "443",
     "destination-ip": "2001:db8:abcd:3f01::/64",
     "source-ip": "2002:c633:6401::1", 
     "lifetime": 1800,
     "traffic-rate": 0,
   }
]]></artwork>
          </figure></t>

        <t>An HTTP DELETE request will be used to delete the black-list rules
        programmed on the access network.</t>

        <figure anchor="Figure3" title="Delete to remove the rules">
          <artwork align="left"><![CDATA[  DELETE {scheme}://{host}:{port}/.well-known/{URI suffix}
  Accept: application/json
  Content-type: application/json
   {
     "policy-id": number
   }
]]></artwork>
        </figure>

        <t></t>

        <t>An HTTP GET request will be used to retrieve the black-list rules
        programmed on the access network.</t>

        <figure anchor="Figure4" title="GET to retrieve the rules">
          <artwork align="left"><![CDATA[  1) To retrieve all the black-lists rules programmed by the CPE router.
  
  GET {scheme}://{host}:{port}/.well-known/{URI suffix} 

  2) To retrieve specific black-list rules programmed by the CPE router.

  GET {scheme}://{host}:{port}/.well-known/{URI suffix} 
  Accept: application/json
  Content-type: application/json
   {
     "policy-id": number
   }]]></artwork>
        </figure>
      </section>

      <section title="BGP">
        <t>BGP defines a mechanism as described in <xref
        target="RFC5575"></xref> that can be used to automate inter-domain
        coordination of traffic filtering, such as what is required in order
        to mitigate DDoS attacks. However, support for BGP in an access
        network does not guarantee that traffic filtering will always be
        honored. Since a CPE router will not receive an acknowledgment for the
        filtering request, the CPE router should monitor and apply similar
        rules in its own network in cases where the upstream network is unable
        to enforce the filtering rules. In addition, enforcement of filtering
        rules of BGP on Internet routers are usually governed by the maximum
        number of data elements the routers can hold as well as the number of
        events they are able to process in a given unit of time.</t>
      </section>
    </section>

    <section title="IANA Considerations">
      <t>TODO</t>
    </section>

    <section anchor="security" title="Security Considerations">
      <t>If REST is used then HTTPS must be used for data integrity and replay
      protection. TLS based on client certificate or HTTP authentication must
      be used to authenticate the network resource signaling the black-list
      rules.</t>
    </section>

    <section anchor="ack" title="Acknowledgements">
      <t>TODO</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
    </references>

    <references title="Informative References">
      <?rfc include="reference.RFC.4732"?>

      <?rfc include="reference.RFC.7159"?>

      <?rfc include="reference.RFC.5575"?>
    </references>
  </back>
</rfc>
